/*
 * File: app/model/MyModel.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

// helper functions

function trim(str, chars)
    {
        return ltrim(rtrim(str, chars), chars);
    }

function ltrim(str, chars)
    {
        chars = chars || "\\s";
        return str.replace(new RegExp("^[" + chars + "]+", "g"), "");
    }

function rtrim(str, chars)
    {
        chars = chars || "\\s";
        return str.replace(new RegExp("[" + chars + "]+$", "g"), "");
    }

Array.prototype.inArray = function (search_phrase)
    {
        for (var i = 0; i < this.length; i++)
            if (search_phrase == this[i])
                return true;
        return false;
    }

// get attributes in json compatible format

/**
 *
 * @param attr
 */
function getAttributeString(attr)
    {
        var text = "";
        // only save valid attributes
        typesToSave = new Array("boolean", "string", "number", "date");
        var attr2serialise = new Array(
                "text",
                "cls",
                "leaf",
                "checked",
                "priority",
                "dateCreated",
                "dateFinished",
                "last30dayTimestamps",
                "freq");
//        var attr2serialise = new Array("text", "expanded", "cls", "leaf", "checked");
        for (var key in attr)
            if (attr2serialise.inArray(key))
                {
                    if (Ext.isString(attr[key]))
                        text += '"' + key + '": "' + attr[key] + '",';
                    else if (Ext.isDate(attr[key]))
                        {
                            var dateString = attr[key] ? attr[key].getTime() : "";
                            text += '"' + key + '": "' + dateString + '",';
                        }
                    else if (Ext.isPrimitive(attr[key]))
                        text += '"' + key + '": ' + attr[key] + ',';
                }

        return trim(text, ",");
    }

Ext.define('MyWorkFlowApp.model.MyModel', {
    extend:'Ext.data.Model',

    requires:[
        'Ext.data.identifier.Uuid'
            ,'Ext.data.Store'
            ,'MyWorkFlowApp.model.MyLocalStorageModel'
            ,'MyWorkFlowApp.model.MyLocalStorageModel'
    ],

    config:{
        fields:[
            {
                name:'freq',
                type:'string',
                convert:function (value, rec)
                    {
                        return !value ? 'once' : value;
                    }
            },
            {
                name:'checked',
                type:'boolean'
            },
            {
                name:'priority',
                type:'number'
            },
            {
                name:'startDate',
                type:'date',
                            dateFormat:'time'
            },
            {
                name:'endDate',
                type:'date',
                            dateFormat:'time'
            },
            {
                name:'dateCreated',
                type:'date',
                            dateFormat:'time'
            },
            {
                name:'dateFinished',
                type:'date',
                            dateFormat:'time'
            },
            {
                name:'last30dayTimestamps',
                type:'string'
            },
            {
                name:'text'
            },
            {
                name:'myrec',
                convert:function(value, rec)
                    {
//                        debugger;
                        return rec;
                    }
            }
        ],
        identifier: 'uuid',
        proxy:{
            type:'ajax',
            batchActions:false,

            url:function(){

//                return "dfsfds";

            var username = 'public';

            if (urlParams && Ext.isString(urlParams.username) && urlParams.username.length > 0)
                {
                    username = urlParams.username;
                }

                if (window.location.hostname === "localhost")
                    {
                        return 'http://localhost/data/sunaxe/' + username + '.json';
//                                return 'http://localhost/MyWorkFlowWebApp/data/sunaxe/' + username + '.json';
                    }
                else if (window.location.hostname === "sunnyjacob.co.uk")
                            { return 'http://sunnyjacob.co.uk/PetProjects/data/sunaxe/' + username + '.json';}
                else
                    {return "change host name settings";}

            }(),

//                            url: 'http://localhost/nonexistentdata.json',
//                            url: 'http://localhost/MyWorkFlowWebApp/web/app/data/mytreedata4.json',
            reader:{
                type:'json'
            },
            writer:{
                //                    root:'root'

            }
            //                ,create:Ext.emptyFn
            //                ,read:Ext.emptyFn
            //                ,update:Ext.emptyFn, destroy:function () {}

            ,listeners:{
                            'exception':function()
                                {
//                                    debugger;
                                    var mycontroller = MyWorkFlowApp.app.getController('MyWorkFlowApp.controller.MyController');

                                    mycontroller.loadException();


                                }
                        }
        }

    },

    toJSON:function (node)
        {
            if (node == null)
                node = this;
            var result = "";
            result += "{" + getAttributeString(node.data);
            // add child nodes
            if (node.childNodes.length > 0)
                {
                    result += ', "children": [';
                    node.eachChild(function (node) { result += this.toJSON(node) + ","; });
                    result = trim(result, ",") + "],";
                }
            else
                {
//                    result += ', "children": null,';
                    result += ', "children": [],';
                }
            return trim(result, ",") + "}";
        },

    childrenToJSON:function (node)
        {
            if (node == null)
                node = this;
            var result = "";
            result += "[";
            // add child nodes
            if (node.childNodes.length > 0)
                {

                    node.eachChild(function (node) { result += this.toJSON(node) + ","; });

                }
            return trim(result, ",") + "]";
        }
});